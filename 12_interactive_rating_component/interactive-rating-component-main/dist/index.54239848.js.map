{"mappings":"ACCA,SAAS,gBAAgB,CAAC,mBAAoB,KAE5C,IAAM,EAAsB,SAAS,cAAc,CAAC,cAC9C,EAAyB,SAAS,cAAc,CAAC,mBACjD,EAAqB,SAAS,gBAAgB,CAAC,uBAC/C,EAAa,SAAS,cAAc,CAAC,QACrC,EAAiB,SAAS,cAAc,CAAC,iBACzC,EAAe,SAAS,cAAc,CAAC,eAQ7C,SAAS,EAAoB,CAAY,EACvC,EAAa,OAAO,CAAC,AAAC,GACpB,EAAY,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,UAE5C,CAQA,SAAS,EAAY,CAAY,CAAE,CAAa,CAAE,CAAS,EACzD,EAAa,SAAS,CAAC,MAAM,CAAC,GAC9B,EAAc,SAAS,CAAC,MAAM,CAAC,EACjC,CA0BA,SAAS,EAAuB,CAAK,EACnC,EACI,EAAa,SAAS,CAAC,MAAM,CAAC,UAC9B,EAAa,SAAS,CAAC,GAAG,CAAC,SACjC,CAiDA,IAAM,EAAW,CACf,OAAQ,CAAC,EAET,GAAG,CAAK,CAAE,CAAQ,EACX,IAAI,CAAC,MAAM,CAAC,EAAM,EACrB,CAAA,IAAI,CAAC,MAAM,CAAC,EAAM,CAAG,EAAE,AAAF,EAEvB,IAAI,CAAC,MAAM,CAAC,EAAM,CAAC,IAAI,CAAC,EAC1B,EAEA,MAAM,CAAK,CAAE,CAAI,EACX,IAAI,CAAC,MAAM,CAAC,EAAM,EACpB,IAAI,CAAC,MAAM,CAAC,EAAM,CAAC,OAAO,CAAC,AAAC,GAC1B,EAAiB,GAGvB,EAEA,IAAI,CAAK,CAAE,CAAQ,EACjB,IAAI,CAAC,MAAM,CAAC,EAAM,CAAG,IAAI,CAAC,MAAM,CAAC,EAAM,CAAC,MAAM,CAC5C,AAAC,GAAqB,IAAqB,EAE/C,CACF,EAGA,EAAS,EAAE,CAAC,cAnDZ,SAA2B,CAAO,EAChC,EAAoB,GAChB,GACF,EAAQ,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,SAExD,GA+CA,EAAS,EAAE,CAAC,aAzCZ,SAAsB,CAAC,EAErB,GA7ByB,SAAS,aAAa,CAC7C,gCAGA,AAwB+B,EAxB7B,cAAc,GAChB,EAAuB,CAAA,GAChB,GAuBI,CACX,EAAE,cAAc,GAEhB,IAAM,EAAO,OAAO,WAAW,CADd,IAAI,SAAS,EAAE,MAAM,GAEtC,EAAY,EAAqB,EAAwB,UApD3D,EAAe,SAAS,CADX,AAsDS,EAtDH,IAAI,CAuDrB,EAAW,KAAK,GAnElB,WAAW,KACT,EAAY,EAAqB,EAAwB,UACzD,EAAoB,GACpB,EAAuB,CAAA,EACzB,EAAG,IAiEH,CACF,GAiCA,EAAmB,OAAO,CAAC,AAAC,GAC1B,EAAkB,gBAAgB,CAAC,SAAU,IAC3C,EAAS,KAAK,CAAC,cAAe,KAIlC,EAAW,gBAAgB,CAAC,SAAU,AAAC,GACrC,EAAS,KAAK,CAAC,aAAc,GAEjC","sources":["<anon>","src/js/app.js"],"sourcesContent":["/* EVENT-DRIVEN ARCHITECTURE (Publishe, Subscriber, Handlers, Event Bus) */ document.addEventListener(\"DOMContentLoaded\", ()=>{\n    /* VARIABLES */ const ratingFormContainer = document.getElementById(\"ratingForm\");\n    const ratingMessageContainer = document.getElementById(\"thankYouMessage\");\n    const ratingRadioButtons = document.querySelectorAll('input[type=\"radio\"]');\n    const ratingForm = document.getElementById(\"form\");\n    const selectedRating = document.getElementById(\"selecteRating\");\n    const errorMessage = document.getElementById(\"submitError\");\n    /*  CALLBACK FOR HANDLING EVENTS VIA EVENTBUS*/ /**\r\n   * Uncheck radio button.\r\n   * @param {NodeListOf<Element>} radioButtons - All radio buttons.\r\n   */ function uncheckRadioButtons(radioButtons) {\n        radioButtons.forEach((radioButton)=>radioButton.parentNode.classList.remove(\"active\"));\n    }\n    /**\r\n   * Toggle class between two elements\r\n   * @param {HTMLElement} fromElement - First HTML element.\r\n   * @param {HTMLElement} toEleemnt - Second HTML element.\r\n   * @param {string} className - Name of class to transfer.\r\n   */ function toggleClass(firstElement, secondElement, className) {\n        firstElement.classList.toggle(className);\n        secondElement.classList.toggle(className);\n    }\n    /**\r\n   * Reset the UI.\r\n   */ function resetUI() {\n        setTimeout(()=>{\n            toggleClass(ratingFormContainer, ratingMessageContainer, \"hidden\");\n            uncheckRadioButtons(ratingRadioButtons);\n            displayValidationError(false);\n        }, 3000);\n    }\n    /**\r\n   * Show selected rating score.\r\n   * @param {number} value - Rating value.\r\n   */ function displayRatingResult(value) {\n        const rate = value.rate;\n        selectedRating.innerText = rate;\n    }\n    /**\r\n   * Show or hide error message.\r\n   * @param {boolean} error - Boolean value (true - show, false - hide).\r\n   */ function displayValidationError(error) {\n        error ? errorMessage.classList.remove(\"hidden\") : errorMessage.classList.add(\"hidden\");\n    }\n    /**\r\n   * Check if rating was selected.\r\n   * @param {Event} e - Event.\r\n   * @returns\r\n   */ function validateFormData(e) {\n        const ratingIsSelected = document.querySelector(\"input[name='rate']:checked\");\n        if (!ratingIsSelected) {\n            e.preventDefault();\n            displayValidationError(true);\n            return false;\n        } else return true;\n    }\n    /**\r\n   * Toggle active class on rating buttons.\r\n   * @param {HTMLInputElement} element - The radio button.\r\n   */ function handleRadioSelect(element) {\n        uncheckRadioButtons(ratingRadioButtons);\n        if (element) element.nextElementSibling.parentNode.classList.add(\"active\");\n    }\n    /**\r\n   * Fetch form data.\r\n   * @param {Event} e - Event.\r\n   */ function handleSubmit(e) {\n        const isValid = validateFormData(e);\n        if (isValid) {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const data = Object.fromEntries(formData);\n            toggleClass(ratingFormContainer, ratingMessageContainer, \"hidden\");\n            displayRatingResult(data);\n            ratingForm.reset();\n            resetUI();\n        }\n    }\n    /* EVENT BUS - CENTRAL DISPATCHER */ const EventBus = {\n        events: {},\n        on (event, callback) {\n            if (!this.events[event]) this.events[event] = [];\n            this.events[event].push(callback);\n        },\n        emmit (event, data) {\n            if (this.events[event]) this.events[event].forEach((callbackFunction)=>callbackFunction(data));\n        },\n        off (event, callback) {\n            this.events[event] = this.events[event].filter((callbackFunction)=>callbackFunction !== callback);\n        }\n    };\n    /* ADD EVENTS AND CALLBACKS */ EventBus.on(\"radioSelect\", handleRadioSelect);\n    EventBus.on(\"formSubmit\", handleSubmit);\n    /* EMMIT EVENTS - EXECUTE CALLBACKS */ ratingRadioButtons.forEach((ratingRadioButton)=>ratingRadioButton.addEventListener(\"change\", ()=>EventBus.emmit(\"radioSelect\", ratingRadioButton)));\n    ratingForm.addEventListener(\"submit\", (event)=>EventBus.emmit(\"formSubmit\", event));\n});\n\n//# sourceMappingURL=index.54239848.js.map\n","/* EVENT-DRIVEN ARCHITECTURE (Publishe, Subscriber, Handlers, Event Bus) */\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  /* VARIABLES */\r\n  const ratingFormContainer = document.getElementById(\"ratingForm\");\r\n  const ratingMessageContainer = document.getElementById(\"thankYouMessage\");\r\n  const ratingRadioButtons = document.querySelectorAll('input[type=\"radio\"]');\r\n  const ratingForm = document.getElementById(\"form\");\r\n  const selectedRating = document.getElementById(\"selecteRating\");\r\n  const errorMessage = document.getElementById(\"submitError\");\r\n\r\n  /*  CALLBACK FOR HANDLING EVENTS VIA EVENTBUS*/\r\n\r\n  /**\r\n   * Uncheck radio button.\r\n   * @param {NodeListOf<Element>} radioButtons - All radio buttons.\r\n   */\r\n  function uncheckRadioButtons(radioButtons) {\r\n    radioButtons.forEach((radioButton) =>\r\n      radioButton.parentNode.classList.remove(\"active\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Toggle class between two elements\r\n   * @param {HTMLElement} fromElement - First HTML element.\r\n   * @param {HTMLElement} toEleemnt - Second HTML element.\r\n   * @param {string} className - Name of class to transfer.\r\n   */\r\n  function toggleClass(firstElement, secondElement, className) {\r\n    firstElement.classList.toggle(className);\r\n    secondElement.classList.toggle(className);\r\n  }\r\n\r\n  /**\r\n   * Reset the UI.\r\n   */\r\n  function resetUI() {\r\n    setTimeout(() => {\r\n      toggleClass(ratingFormContainer, ratingMessageContainer, \"hidden\");\r\n      uncheckRadioButtons(ratingRadioButtons);\r\n      displayValidationError(false);\r\n    }, 3000);\r\n  }\r\n\r\n  /**\r\n   * Show selected rating score.\r\n   * @param {number} value - Rating value.\r\n   */\r\n  function displayRatingResult(value) {\r\n    const rate = value.rate;\r\n    selectedRating.innerText = rate;\r\n  }\r\n\r\n  /**\r\n   * Show or hide error message.\r\n   * @param {boolean} error - Boolean value (true - show, false - hide).\r\n   */\r\n  function displayValidationError(error) {\r\n    error\r\n      ? errorMessage.classList.remove(\"hidden\")\r\n      : errorMessage.classList.add(\"hidden\");\r\n  }\r\n\r\n  /**\r\n   * Check if rating was selected.\r\n   * @param {Event} e - Event.\r\n   * @returns\r\n   */\r\n  function validateFormData(e) {\r\n    const ratingIsSelected = document.querySelector(\r\n      \"input[name='rate']:checked\"\r\n    );\r\n    if (!ratingIsSelected) {\r\n      e.preventDefault();\r\n      displayValidationError(true);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle active class on rating buttons.\r\n   * @param {HTMLInputElement} element - The radio button.\r\n   */\r\n  function handleRadioSelect(element) {\r\n    uncheckRadioButtons(ratingRadioButtons);\r\n    if (element) {\r\n      element.nextElementSibling.parentNode.classList.add(\"active\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch form data.\r\n   * @param {Event} e - Event.\r\n   */\r\n  function handleSubmit(e) {\r\n    const isValid = validateFormData(e);\r\n    if (isValid) {\r\n      e.preventDefault();\r\n      const formData = new FormData(e.target);\r\n      const data = Object.fromEntries(formData);\r\n      toggleClass(ratingFormContainer, ratingMessageContainer, \"hidden\");\r\n      displayRatingResult(data);\r\n      ratingForm.reset();\r\n      resetUI();\r\n    }\r\n  }\r\n\r\n  /* EVENT BUS - CENTRAL DISPATCHER */\r\n  const EventBus = {\r\n    events: {},\r\n\r\n    on(event, callback) {\r\n      if (!this.events[event]) {\r\n        this.events[event] = [];\r\n      }\r\n      this.events[event].push(callback);\r\n    },\r\n\r\n    emmit(event, data) {\r\n      if (this.events[event]) {\r\n        this.events[event].forEach((callbackFunction) =>\r\n          callbackFunction(data)\r\n        );\r\n      }\r\n    },\r\n\r\n    off(event, callback) {\r\n      this.events[event] = this.events[event].filter(\r\n        (callbackFunction) => callbackFunction !== callback\r\n      );\r\n    },\r\n  };\r\n\r\n  /* ADD EVENTS AND CALLBACKS */\r\n  EventBus.on(\"radioSelect\", handleRadioSelect);\r\n  EventBus.on(\"formSubmit\", handleSubmit);\r\n\r\n  /* EMMIT EVENTS - EXECUTE CALLBACKS */\r\n  ratingRadioButtons.forEach((ratingRadioButton) =>\r\n    ratingRadioButton.addEventListener(\"change\", () =>\r\n      EventBus.emmit(\"radioSelect\", ratingRadioButton)\r\n    )\r\n  );\r\n\r\n  ratingForm.addEventListener(\"submit\", (event) =>\r\n    EventBus.emmit(\"formSubmit\", event)\r\n  );\r\n});\r\n"],"names":["document","addEventListener","ratingFormContainer","getElementById","ratingMessageContainer","ratingRadioButtons","querySelectorAll","ratingForm","selectedRating","errorMessage","uncheckRadioButtons","radioButtons","forEach","radioButton","parentNode","classList","remove","toggleClass","firstElement","secondElement","className","toggle","displayValidationError","error","add","EventBus","events","on","event","callback","push","emmit","data","callbackFunction","off","filter","element","nextElementSibling","e","querySelector","preventDefault","Object","fromEntries","FormData","target","innerText","value","rate","reset","setTimeout","ratingRadioButton"],"version":3,"file":"index.54239848.js.map"}