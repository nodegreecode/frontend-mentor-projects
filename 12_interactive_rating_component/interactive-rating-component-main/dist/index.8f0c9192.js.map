{"mappings":"AAAA,yEAAyE,GACzE,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,aAAa,GACb,MAAM,sBAAsB,SAAS,cAAc,CAAC;IACpD,MAAM,yBAAyB,SAAS,cAAc,CAAC;IACvD,MAAM,qBAAqB,SAAS,gBAAgB,CAAC;IACrD,MAAM,aAAa,SAAS,cAAc,CAAC;IAC3C,MAAM,iBAAiB,SAAS,cAAc,CAAC;IAC/C,MAAM,eAAe,SAAS,cAAc,CAAC;IAE7C,6CAA6C,GAE7C;;;GAGC,GACD,SAAS,oBAAoB,YAAY;QACvC,aAAa,OAAO,CAAC,CAAC,cACpB,YAAY,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;IAE5C;IAEA;;;;;GAKC,GACD,SAAS,YAAY,YAAY,EAAE,aAAa,EAAE,SAAS;QACzD,aAAa,SAAS,CAAC,MAAM,CAAC;QAC9B,cAAc,SAAS,CAAC,MAAM,CAAC;IACjC;IAEA;;GAEC,GACD,SAAS;QACP,WAAW;YACT,YAAY,qBAAqB,wBAAwB;YACzD,oBAAoB;YACpB,uBAAuB;QACzB,GAAG;IACL;IAEA;;;GAGC,GACD,SAAS,oBAAoB,KAAK;QAChC,MAAM,OAAO,MAAM,IAAI;QACvB,eAAe,SAAS,GAAG;IAC7B;IAEA;;;GAGC,GACD,SAAS,uBAAuB,KAAK;QACnC,QACI,aAAa,SAAS,CAAC,MAAM,CAAC,YAC9B,aAAa,SAAS,CAAC,GAAG,CAAC;IACjC;IAEA;;;;GAIC,GACD,SAAS,iBAAiB,CAAC;QACzB,MAAM,mBAAmB,SAAS,aAAa,CAC7C;QAEF,IAAI,CAAC,kBAAkB;YACrB,EAAE,cAAc;YAChB,uBAAuB;YACvB,OAAO;QACT,OACE,OAAO;IAEX;IAEA;;;GAGC,GACD,SAAS,kBAAkB,OAAO;QAChC,oBAAoB;QACpB,IAAI,SACF,QAAQ,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC;IAExD;IAEA;;;GAGC,GACD,SAAS,aAAa,CAAC;QACrB,MAAM,UAAU,iBAAiB;QACjC,IAAI,SAAS;YACX,EAAE,cAAc;YAChB,MAAM,WAAW,IAAI,SAAS,EAAE,MAAM;YACtC,MAAM,OAAO,OAAO,WAAW,CAAC;YAChC,YAAY,qBAAqB,wBAAwB;YACzD,oBAAoB;YACpB,WAAW,KAAK;YAChB;QACF;IACF;IAEA,kCAAkC,GAClC,MAAM,WAAW;QACf,QAAQ,CAAC;QAET,IAAG,KAAK,EAAE,QAAQ;YAChB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EACrB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE;YAEzB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;QAC1B;QAEA,OAAM,KAAK,EAAE,IAAI;YACf,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EACpB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,mBAC1B,iBAAiB;QAGvB;QAEA,KAAI,KAAK,EAAE,QAAQ;YACjB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAC5C,CAAC,mBAAqB,qBAAqB;QAE/C;IACF;IAEA,4BAA4B,GAC5B,SAAS,EAAE,CAAC,eAAe;IAC3B,SAAS,EAAE,CAAC,cAAc;IAE1B,oCAAoC,GACpC,mBAAmB,OAAO,CAAC,CAAC,oBAC1B,kBAAkB,gBAAgB,CAAC,UAAU,IAC3C,SAAS,KAAK,CAAC,eAAe;IAIlC,WAAW,gBAAgB,CAAC,UAAU,CAAC,QACrC,SAAS,KAAK,CAAC,cAAc;AAEjC","sources":["src/js/app.js"],"sourcesContent":["/* EVENT-DRIVEN ARCHITECTURE (Publishe, Subscriber, Handlers, Event Bus) */\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  /* VARIABLES */\r\n  const ratingFormContainer = document.getElementById(\"ratingForm\");\r\n  const ratingMessageContainer = document.getElementById(\"thankYouMessage\");\r\n  const ratingRadioButtons = document.querySelectorAll('input[type=\"radio\"]');\r\n  const ratingForm = document.getElementById(\"form\");\r\n  const selectedRating = document.getElementById(\"selecteRating\");\r\n  const errorMessage = document.getElementById(\"submitError\");\r\n\r\n  /*  CALLBACK FOR HANDLING EVENTS VIA EVENTBUS*/\r\n\r\n  /**\r\n   * Uncheck radio button.\r\n   * @param {NodeListOf<Element>} radioButtons - All radio buttons.\r\n   */\r\n  function uncheckRadioButtons(radioButtons) {\r\n    radioButtons.forEach((radioButton) =>\r\n      radioButton.parentNode.classList.remove(\"active\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Toggle class between two elements\r\n   * @param {HTMLElement} fromElement - First HTML element.\r\n   * @param {HTMLElement} toEleemnt - Second HTML element.\r\n   * @param {string} className - Name of class to transfer.\r\n   */\r\n  function toggleClass(firstElement, secondElement, className) {\r\n    firstElement.classList.toggle(className);\r\n    secondElement.classList.toggle(className);\r\n  }\r\n\r\n  /**\r\n   * Reset the UI.\r\n   */\r\n  function resetUI() {\r\n    setTimeout(() => {\r\n      toggleClass(ratingFormContainer, ratingMessageContainer, \"hidden\");\r\n      uncheckRadioButtons(ratingRadioButtons);\r\n      displayValidationError(false);\r\n    }, 3000);\r\n  }\r\n\r\n  /**\r\n   * Show selected rating score.\r\n   * @param {number} value - Rating value.\r\n   */\r\n  function displayRatingResult(value) {\r\n    const rate = value.rate;\r\n    selectedRating.innerText = rate;\r\n  }\r\n\r\n  /**\r\n   * Show or hide error message.\r\n   * @param {boolean} error - Boolean value (true - show, false - hide).\r\n   */\r\n  function displayValidationError(error) {\r\n    error\r\n      ? errorMessage.classList.remove(\"hidden\")\r\n      : errorMessage.classList.add(\"hidden\");\r\n  }\r\n\r\n  /**\r\n   * Check if rating was selected.\r\n   * @param {Event} e - Event.\r\n   * @returns\r\n   */\r\n  function validateFormData(e) {\r\n    const ratingIsSelected = document.querySelector(\r\n      \"input[name='rate']:checked\"\r\n    );\r\n    if (!ratingIsSelected) {\r\n      e.preventDefault();\r\n      displayValidationError(true);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle active class on rating buttons.\r\n   * @param {HTMLInputElement} element - The radio button.\r\n   */\r\n  function handleRadioSelect(element) {\r\n    uncheckRadioButtons(ratingRadioButtons);\r\n    if (element) {\r\n      element.nextElementSibling.parentNode.classList.add(\"active\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch form data.\r\n   * @param {Event} e - Event.\r\n   */\r\n  function handleSubmit(e) {\r\n    const isValid = validateFormData(e);\r\n    if (isValid) {\r\n      e.preventDefault();\r\n      const formData = new FormData(e.target);\r\n      const data = Object.fromEntries(formData);\r\n      toggleClass(ratingFormContainer, ratingMessageContainer, \"hidden\");\r\n      displayRatingResult(data);\r\n      ratingForm.reset();\r\n      resetUI();\r\n    }\r\n  }\r\n\r\n  /* EVENT BUS - CENTRAL DISPATCHER */\r\n  const EventBus = {\r\n    events: {},\r\n\r\n    on(event, callback) {\r\n      if (!this.events[event]) {\r\n        this.events[event] = [];\r\n      }\r\n      this.events[event].push(callback);\r\n    },\r\n\r\n    emmit(event, data) {\r\n      if (this.events[event]) {\r\n        this.events[event].forEach((callbackFunction) =>\r\n          callbackFunction(data)\r\n        );\r\n      }\r\n    },\r\n\r\n    off(event, callback) {\r\n      this.events[event] = this.events[event].filter(\r\n        (callbackFunction) => callbackFunction !== callback\r\n      );\r\n    },\r\n  };\r\n\r\n  /* ADD EVENTS AND CALLBACKS */\r\n  EventBus.on(\"radioSelect\", handleRadioSelect);\r\n  EventBus.on(\"formSubmit\", handleSubmit);\r\n\r\n  /* EMMIT EVENTS - EXECUTE CALLBACKS */\r\n  ratingRadioButtons.forEach((ratingRadioButton) =>\r\n    ratingRadioButton.addEventListener(\"change\", () =>\r\n      EventBus.emmit(\"radioSelect\", ratingRadioButton)\r\n    )\r\n  );\r\n\r\n  ratingForm.addEventListener(\"submit\", (event) =>\r\n    EventBus.emmit(\"formSubmit\", event)\r\n  );\r\n});\r\n"],"names":[],"version":3,"file":"index.8f0c9192.js.map","sourceRoot":"/__parcel_source_root/"}